#import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


#get data
column_names = ['user_id', 'item_id', 'rating', 'timestamp']


path = 'https://media.geeksforgeeks.org/wp-content/uploads/file.tsv'


df = pd.read_csv(path, sep='\t', names=column_names)


#check head of the data
df.head()


#check out all the movies and their respective IDs
movie_titles = pd.read_csv('https://media.geeksforgeeks.org/wp-content/uploads/Movie_Id_Titles.csv')
movie_titles.head()


data = pd.merge(df, movie_titles, on='item_id')
data.head()


#calculate mean rating of all movies
data.groupby('title')['rating'].mean().sort_values(ascending=False).head()


#calculate count rating of all movies
data.groupby('title')['rating'].count().sort_values(ascending=False).head()


#creating dataframe with 'rating' count values
ratings = pd.DataFrame(data.groupby('title')['rating'].mean())


ratings['num of ratings'] = pd.DataFrame(data.groupby('title')['rating'].count())


ratings.head()


sns.set_style('white')


#sorting values according to the 'num of rating column'
moviemat = data.pivot_table(index ='user_id',
            columns ='title', values ='rating')


moviemat.head()


ratings.sort_values('num of ratings', ascending = False).head(10)


plt.figure(figsize=(10, 4))
ratings['num of ratings'].hist(bins=70)
plt.title('Histogram of Number of Ratings')
plt.xlabel('Number of Ratings')
plt.ylabel('Frequency')
plt.show()


plt.figure(figsize=(10, 4))
ratings['rating'].hist(bins=70)
plt.title('Histogram of Ratings')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

name = input("Enter movie name: ")
movie_user_ratings = moviemat[f'{name}']

#analyzing correlation with similar movies
movie_user_ratings = moviemat[f'{name}']

movie_user_ratings.head()

#analyzing correlation with similar movies
similar_to_movie = moviemat.corrwith(movie_user_ratings)

corr_movie = pd.DataFrame(similar_to_movie, columns =['Correlation'])
corr_movie.dropna(inplace = True)

corr_movie.head()

#user input movies similar movies based on correlation
corr_movie.sort_values('Correlation', ascending = False).head(10)
corr_movie = corr_movie.join(ratings['num of ratings'])

corr_movie.head()

corr_movie[corr_movie['num of ratings']>100].sort_values('Correlation', ascending = False).head()

#prints similar movies to user input movie in console
print(f"Similar movies to {name}:")
similar_movie_filtered = corr_movie[corr_movie['num of ratings'] > 100].sort_values('Correlation', ascending=False).head(10)
print(similar_movie_filtered)

#plots similar movies to user input movie in a table
plt.figure(figsize=(12, 6))
table_data_movie = similar_movie_filtered.reset_index().rename(columns={'index': 'Movie Title'})
plt.table(cellText=table_data_movie.values, colLabels=table_data_movie.columns, loc='center')
plt.axis('off')  # Turn off axis
plt.title(f'Similar Movies to {name}')
plt.show()





